name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CLANG_TIDY_VERSION: "18.1.6"
  VERBOSE: 1


jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-20.04
          # Turn off macos for now. setup-cpp is broken for macos installing gcovr.
          # - macos-12
          - windows-2019
        compiler:
          - llvm-18.1.6
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        packaging_maintainer_mode:
          - ON
          - OFF
        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-2019
            compiler: gcc-11

          # gcc-11 on macos with glfw isn't compatible. Exclude for now.
          # Include g++-11 in the future as apparently that works - https://github.com/glfw/glfw/issues/1743
          - os: macos-12
            compiler: gcc-11

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-11
            gcov_executable: gcov-10
            enable_ipo: On

          - compiler: llvm-18.1.6
            enable_ipo: Off
            gcov_executable: "llvm-cov gcov"

          # Turn off macos for now. setup-cpp is broken for macos installing gcovr.
          # - os: macos-12
          #   enable_ipo: Off

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            packaging_maintainer_mode: OFF
            package_generator: TBZ2

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-20.04
            compiler: gcc-11
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov-11
            packaging_maintainer_mode: On
            enable_ipo: Off

          # Windows msvc builds
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: On
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            packaging_maintainer_mode: Off

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: Off
            package_generator: ZIP

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            packaging_maintainer_mode: On
            enable_ipo: On


    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        uses: ./.github/actions/install_dependencies

      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}
          generator: ${{ matrix.generator }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      # This is purely because setup-cpp can't install 18.1.6 for windows so we need to do it ourselves.
      - name: Install llvm
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install llvm --version 18.1.6


      - name: Setup Cpp
        if: runner.os != 'Windows'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}


          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Setup Cpp
        if: runner.os == 'Windows'
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          vcpkg: false
          ccache: true

          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Configure CMake
        if: matrix.os != 'windows-2019' && matrix.compiler != 'llvm-18.1.6'
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DGIT_SHA:STRING=${{ github.sha }}

      # Special case windows-2019 to use CMAKE_C_COMPILER AND CMAKE_CXX_COMPILER othewise msvc compiler is picked up.
      - name: Configure CMake
        if: matrix.os == 'windows-2019' && matrix.compiler == 'llvm-18.1.6'
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.packaging_maintainer_mode}} -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DGIT_SHA:STRING=${{ github.sha }} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++


      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}
        
      - name: Unix - Test
        if: runner.os != 'Windows'
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}} --test-dir ./build

      - name: Unix - Coverage
        if: runner.os != 'Windows'
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          gcovr -j ${{env.nproc}} --gcov-executable '${{ matrix.gcov_executable }}' ./build --filter src/ --filter include/ --print-summary --xml-pretty --xml coverage.xml --delete --print-summary --txt

      - name: Windows - Test
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          ctest -c ${{matrix.build_type}}

      # Turn off windows test and coverage at the moment as OpenCppCoverage doesn't do what I want
      # - name: Windows - Test and coverage
      #   if: runner.os == 'Windows'
      #   working-directory: ./build
      #   run: |
      #     OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children --excluded_modules *\vendor\* --excluded_modules *\examples\* --excluded_modules *\fuzz_test\* --modules Evie -- ctest -C ${{matrix.build_type}}

      # Turn off packing and releasing for now. It's causing problems.
      # - name: CPack
      #   if: matrix.package_generator != ''
      #   working-directory: ./build
      #   run: |
      #     cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      # - name: Publish Tagged Release
      #   uses: softprops/action-gh-release@v1
      #   if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
      #   with:
      #     files: |
      #       build/*-*${{ matrix.build_type }}*-*.*


      - name: Publish to codecov
        # Only publish CI to codecov if building in debug as we don't enable coverage for release builds
        if: matrix.build_type == 'Debug'
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./coverage.xml